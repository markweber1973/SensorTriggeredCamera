interface IOutput
{
    extern integer $int$;	
	in void write(integer pin, integer value);

 	behaviour
 	{
		on write: {}
	}
}

interface IInput
{
  in  void edgeDetected();
  out void triggered();

  behaviour
  {
      on edgeDetected:    { triggered; }      
  }
}

interface IIRLED
{
	in void SwitchOn();
	in void SwitchOff();
	
	behaviour
 	{
	    enum State { Off, On };
	    State state = State.Off;
	    [state.Off]
	    {
	    	on SwitchOn: {state = State.On;}
	    	on SwitchOff:   illegal;
	    }
	    [state.On]
	    {
	    	on SwitchOff: {state = State.Off;}
	    	on SwitchOn:   illegal;
	    }    
    }	
}

component IRLED
{
	provides IIRLED irLed;
	requires IOutput iOutput;
	
	behaviour
	{
	    enum State { On, Off };
	    State state = State.Off;
	    [state.Off]
	    {    	
	    	on irLed.SwitchOn(): {iOutput.write($10$, $1$); state = State.On;}
	    	on irLed.SwitchOff(): illegal;
	    }
	    [state.On]
	    {
	    	on irLed.SwitchOff(): {iOutput.write($10$, $0$); state = State.Off;}
	    	on irLed.SwitchOn(): illegal;    	
	    }	
	}	
}


interface IPIRSensor
{
  in void enable();
  in void disable();
  out void triggered();

  behaviour
  {
    enum State { Disabled, Enabled };
    State state = State.Disabled;
    [state.Disabled]
    {
    	on enable:		state = State.Enabled;
    	on disable:		illegal;
    }
    [state.Enabled]
    {
    	on disable:		{state = State.Disabled;}
    	on enable:		illegal;
    	on optional:	{ triggered;  }  	
    }   
  } 
}

component PIRSensor
{
  provides IPIRSensor 	pirSensor;
  requires IInput  		inputSignal;

  behaviour
  {
    enum State { Disabled, Enabled};
    State state = State.Disabled;
    [state.Disabled]
    {
    	on pirSensor.enable():		{state = State.Enabled;}
    	on pirSensor.disable():		illegal;
    	on inputSignal.triggered():	illegal; 
    }
    [state.Enabled]
    {
    	on pirSensor.disable():	{state = State.Disabled;}
    	on pirSensor.enable():	illegal;   	
    	on inputSignal.triggered():	{pirSensor.triggered();}
    }
  }	
}

interface ICamera
{
  in void takePicture();
  in void abort();
  out void pictureReady();
  behaviour
  {
    enum State {Standby, TakingPicture};
    State state = State.Standby;
    [state.Standby] 
    {
      on takePicture: { state = State.TakingPicture;}
      on abort: illegal;
    }
    [state.TakingPicture] 
    {
      on takePicture: illegal;
      on inevitable: { pictureReady; state = State.Standby;}
      on abort: {state = State.Standby;}      
    }         
  }
}

interface IMotionTriggeredCam
{
  in void enable();
  in void disable();
  
  behaviour 
  {
    enum State {Disabled, Enabled};
    State state = State.Disabled;
    [state.Disabled] {
      on enable:		{ state = State.Enabled; }
      on disable:		illegal;
    }
    [state.Enabled] {
      on disable:		{ state = State.Disabled; }
      on enable:		illegal;               
    }   
  }
}

component MotionTriggeredCam
{
  provides IMotionTriggeredCam motionTriggeredCam;
  requires ICamera camera;
  requires IPIRSensor sensor;
  requires IIRLED led;  
	
  behaviour
  {
    enum State {Enabled, Disabled, Busy};
    State state = State.Disabled;
   
    [state.Disabled]
    {
      on motionTriggeredCam.enable():	{ sensor.enable(); state = State.Enabled; }
      on motionTriggeredCam.disable:	illegal;
      on sensor.triggered():            illegal;     
      on camera.pictureReady(): 		illegal;      
    }
    [state.Enabled]
    {
      on motionTriggeredCam.disable():	{ sensor.disable(); state = State.Disabled; }
      on motionTriggeredCam.enable():	illegal;     
      on sensor.triggered():			{led.SwitchOn(); camera.takePicture(); state = State.Busy;}
      on camera.pictureReady(): 		illegal;
    }
  	[state.Busy]
  	{
      on motionTriggeredCam.disable():	{led.SwitchOff(); sensor.disable(); camera.abort(); state = State.Disabled;}
      on motionTriggeredCam.enable():	illegal;     
      on sensor.triggered():            {state = State.Busy;}
  	  on camera.pictureReady(): 		{led.SwitchOff(); state = State.Enabled; }
  	}
  }  
}
 
component MotionTriggeredCameraSystem 
{
  provides IMotionTriggeredCam pIMotionTriggeredCam;
  requires IInput rIInput;  
  requires IOutput rIOutput;  
  requires ICamera rICamera;

  system
  {
  	MotionTriggeredCam cMTC;
    IRLED cIRLED;
  	PIRSensor cPIRSensor;

    pIMotionTriggeredCam <=> cMTC.motionTriggeredCam;
    cMTC.camera <=> rICamera;
    cMTC.sensor <=> cPIRSensor.pirSensor;
    cMTC.led <=> cIRLED.irLed;
    cPIRSensor.inputSignal <=> rIInput;
    cIRLED.iOutput <=> rIOutput;
  }	
}

